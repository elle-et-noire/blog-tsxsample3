{"pageProps":{"post":{"title":"Next.js で作ったブログを GitHub Pages にデプロイする","date":"2021-08-01","tags":["deployment","github","next"],"year":"2021","month":"08","slug":"deploy-nextjs-app-to-github-pages","content":"<h2>はじめに</h2>\n<p>静的なウェブサイトを公開できる GitHub Pages を利用して、Next.js で作ったブログを GitHub Pages にデプロイするやり方を書いていく。</p>\n<h2>環境</h2>\n<ul>\n<li>GitHub Pages</li>\n<li>GitHub Actions</li>\n<li>Yarn 1.22.x</li>\n<li>Next.js 11.0.x</li>\n</ul>\n<h2>大まかな流れ</h2>\n<ol>\n<li>Next.js でブログを作成する</li>\n<li>GitHub Pages にデプロイするための調整を Next.js 側で行う</li>\n<li>GitHub Actions のワークフローを作成する</li>\n<li>GitHub にリポジトリを作成する</li>\n<li>ローカルリポジトリを GitHub に push する</li>\n<li>デプロイ用のワークフローが正常に動作していることを確認する</li>\n<li>ブログサイトにアクセスして正常にデプロイされているか確認する</li>\n</ol>\n<h2>Next.js でブログを作成する</h2>\n<p>自分は Next.js 公式の <a href=\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">examples/blog-starter-typescript</a> を参考にして作った。記事を Markdown で管理し、リポジトリに含めるやり方。メリットはすべてのものがリポジトリ内で完結している点。デメリットは記事の細かな操作を自分で一から書かないといけない点。もちろんいくつかのライブラリを使って楽はできるが、JavaScript や Node.js に慣れていないとわりとめんどくさい。</p>\n<p>機能的に最小限で記事数も少ないのであれば「すべてをリポジトリに含めるやり方」がいいかもしれない。記事数が多く、機能もそこそこ充実させたい場合は Headless CMS を検討する。</p>\n<p>Next.js の ISR (Incremental Static Regeneration) や WordPress の利用などまで考えてしまうと話がややこしくなるので、ここでは省略する。</p>\n<h2>GitHub Pages にデプロイするための調整を Next.js 側で行う</h2>\n<p>GitHub Pages はデフォルトでは <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jekyll</a> を使ってサイトを構築しようとする (<em>Aug 01, 2021</em> 現在)。今回は Jekyll ではなく Next.js を使うので、もろもろの調整が必要になる。</p>\n<p>まず、空の .nojekyll というファイルを public ディレクトリ以下に置いておく。これで GitHub Pages のデフォルトの動作を変更することができる。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">cd /path/to/project\ntouch public/.nojekyll</code></pre></div>\n<p>次に next.config.js で以下の設定を行う。</p>\n<div class=\"remark-highlight\"><pre data-file=\"next.config.js\" class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// repository_name はそれぞれの値に置き換える</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">basePath</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GITHUB_ACTIONS</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"/repository_name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">trailingSlash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://nextjs.org/docs/api-reference/next.config.js/basepath\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">basePath</a> は Next.js 9.5 で追加されたものだが、上記のように設定することによって、ローカル環境と GitHub Actions で実行されたビルドとで basePath の値を調整することができる。例えば <a href=\"https://nextjs.org/docs/api-reference/next/link\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">next/link</a> の href が /about なリンクがページのどこかにあった場合、値は以下のようになる。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">ローカル環境\nhttp://localhost:3000/about/\n\nGitHub Pages\nhttps://username.github.io/repository_name/about/</code></pre></div>\n<p>ちなみに GITHUB_ACTIONS というのは GitHub Actions が持っているデフォルトの環境変数の一つ。一覧は <a href=\"https://docs.github.com/ja/actions/reference/environment-variables#default-environment-variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">デフォルトの環境変数</a> で確認できる。ローカル環境と GitHub Actions で実行されたものを区別できるものなら特になんでもいいが、一番わかりやすそうな GITHUB_ACTIONS を今回は利用した。</p>\n<p><a href=\"https://nextjs.org/docs/api-reference/next.config.js/trailing-slash\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trailingSlash</a> も Next.js 9.5 で追加されたものだが、本番環境用にビルド・デプロイしたアプリケーション (Node.js サーバを必要としないもの) 上で、直接 /about にアクセスした場合などに 404 になるのを防ぐことができるので true にしておく。</p>\n<h2>GitHub Actions のワークフローを作成する</h2>\n<p>ここでは GitHub Pages にアプリケーションをデプロイする処理を書いていく。これを書くことによって、git push 時に特定のワークフローを実行することができ、ビルド・デプロイを自動化できる。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">cd /path/to/project\nmkdir -p .github/workflows\ntouch .github/workflows/deploy.yml</code></pre></div>\n<div class=\"remark-highlight\"><pre data-file=\".github/workflows/deploy.yml\" class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to GitHub Pages\n\n<span class=\"token comment\"># main ブランチ の push 時にこのワークフローを実行する</span>\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> main\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span><span class=\"token number\">20.04</span>\n\n   <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n     <span class=\"token comment\"># main ブランチを取得する</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n       <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n\n     <span class=\"token comment\"># Node.js のセットアップをする</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Node\n       <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v2\n       <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n         <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> 14.x\n         <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span> yarn\n\n     <span class=\"token comment\"># パッケージをインストールする</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies\n       <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> yarn <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>frozen<span class=\"token punctuation\">-</span>lockfile\n\n     <span class=\"token comment\"># ビルドする</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n       <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> yarn build\n\n     <span class=\"token comment\"># GitHub Pages にデプロイする</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n       <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3\n       <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n         <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n         <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> out\n</code></pre></div>\n<p>GitHub で個人アクセストークンを作成しておく (<a href=\"https://docs.github.com/ja/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">個人アクセストークンを使用する</a>)。</p>\n<p>OS や actions、Node.js のバージョンは現在自分が最適だと思うものを指定する。また actions などはバージョンが上がると書き方が変わったりするので注意。以下でそれぞれ確認することができる。</p>\n<ul>\n<li><a href=\"https://github.com/actions/checkout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actions/checkout</a></li>\n<li><a href=\"https://github.com/actions/setup-node\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actions/setup-node</a></li>\n<li><a href=\"https://github.com/peaceiris/actions-gh-pages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">peaceiris/actions-gh-pages</a></li>\n</ul>\n<p>ビルドコマンドを package.json に書く。</p>\n<div class=\"remark-highlight\"><pre data-file=\"package.json\" class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next dev\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next build &#x26;&#x26; next export\"</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>next export が実行されるとプロジェクトルートに out ディレクトリが作成され、そこにすべての本番環境用のファイルが配置される。つまり GitHub Pages 上でのルートになる。</p>\n<p>また、ローカル環境やステージング環境でも next export して動作確認をする場合があるので、 out ディレクトリも Git の管理下から除外しておく。</p>\n<div class=\"remark-highlight\"><pre data-file=\".gitignore\" class=\"language-unknown\"><code class=\"language-unknown\">/.next\n/node_modules\n/out</code></pre></div>\n<h2>GitHub にリポジトリを作成する</h2>\n<p>もろもろの作成・設定を終えたら GitHub にリポジトリを作成する。カスタムドメインを使用しない場合リポジトリ名がそのままドキュメントルートになるので注意する。以下のような感じ。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">username と repository_name はそれぞれの値に置き換える\nhttps://username.github.io/repository_name/</code></pre></div>\n<h2>ローカルリポジトリを GitHub に push する</h2>\n<p>username と repository_name はそれぞれの値に書き換える。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">cd /path/to/project\ngit init\ngit add .\ngit status\ngit commit\ngit remote add origin git@github.com:username/repository_name.git\ngit branch -M main\ngit push -u origin main</code></pre></div>\n<h2>デプロイ用のワークフローが正常に動作していることを確認する</h2>\n<p>GitHub で作成したリポジトリページのブランチ切替ボタンをクリックして gh-pages ブランチが作られていることを確認する。gh-pages ブランチがある場合、作成した GitHub Actions のワークフローが正常に動作していることになる (この処理は <a href=\"https://github.com/peaceiris/actions-gh-pages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">peaceiris/actions-gh-pages</a> がやっている) 。</p>\n<p>次に Settings > Pages とたどり、GitHub Pages の設定項目の Source の Branch を gh-pages にし Save する。</p>\n<h2>ブログサイトにアクセスして正常にデプロイされているか確認する</h2>\n<p>以下の URL にアクセスして動作などを確認する。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">username と repository_name はそれぞれの値に置き換える\nhttps://username.github.io/repository_name/</code></pre></div>\n<h2>まとめ</h2>\n<p>このサイトは <em>Aug 01, 2021</em> 現在 Next.js + GitHub Pages の組み合わせで動いている。Next.js で作成したものを GitHub Pages にデプロイするにあたっていろいろ調べてみたが、わりとハマりどころがあってやや苦労した。</p>\n<p>ただ、Next.js の理解も深まり、GitHub Pages の特徴、 GitHub Actions のあれこれを学べたので結果的には収穫が多かった。以下はこのサイトのリポジトリ。</p>\n<ul>\n<li><a href=\"https://github.com/jamband/blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub: jamband/blog</a></li>\n</ul>\n<h2>関連リンク</h2>\n<ul>\n<li><a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">About GitHub Pages</a></li>\n<li><a href=\"https://docs.github.com/en/actions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Actions</a></li>\n<li><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js</a></li>\n</ul>\n"}},"__N_SSG":true}